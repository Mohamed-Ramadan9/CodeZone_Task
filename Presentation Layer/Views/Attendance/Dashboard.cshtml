@model PaginatedAttendanceListViewModel

@{
    ViewBag.Title = "Attendance Dashboard";
}

<!-- Alert Container - Fixed at top -->
<div id="alertContainer" style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999; width: 400px; display: none;"></div>

@Html.AntiForgeryToken()

<!-- Edit Modal -->
<div class="modal fade" id="editAttendanceModal" tabindex="-1" aria-labelledby="editAttendanceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAttendanceModalLabel">Edit Attendance Record</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAttendanceForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="editRecordId" />
                    <div class="mb-3">
                        <label for="editEmployeeName" class="form-label">Employee</label>
                        <input type="text" class="form-control" id="editEmployeeName" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="editDepartmentName" class="form-label">Department</label>
                        <input type="text" class="form-control" id="editDepartmentName" readonly />
                    </div>
                    <div class="mb-3">
                        <label for="editDate" class="form-label">Date</label>
                        <input type="date" class="form-control" id="editDate" />
                    </div>
                    <div class="mb-3">
                        <label for="editStatus" class="form-label">Status</label>
                        <select class="form-select" id="editStatus">
                            <option value="1">Present</option>
                            <option value="2">Absent</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveEditAttendance">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteAttendanceModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="deleteAttendanceForm" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" id="attendanceIdToDelete" />
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this attendance record?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteAttendance">Confirm Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <h2>Attendance Dashboard</h2>
            <p class="text-muted">Manage and view all attendance records with dynamic calendar interface</p>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Filters & Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                                                 <div class="col-md-3">
                             <div class="form-group">
                                 <label for="filterEmployee" class="form-label">Employee</label>
                                 <input type="text" id="filterEmployee" class="form-control" placeholder="Search by employee name...">
                             </div>
                         </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="filterDepartment" class="form-label">Department</label>
                                <select id="filterDepartment" class="form-select">
                                    <option value="">All Departments</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="filterStatus" class="form-label">Status</label>
                                <select id="filterStatus" class="form-select">
                                    <option value="">All Status</option>
                                    <option value="Present">Present</option>
                                    <option value="Absent">Absent</option>
                                    <option value="NotMarked">Not Marked</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label for="filterDate" class="form-label">Date</label>
                                <input type="date" id="filterDate" class="form-control" />
                            </div>
                        </div>
                                                 <div class="col-md-2">
                             <div class="form-group">
                                 <label class="form-label">&nbsp;</label>
                                 <div>
                                     <button id="clearFilters" class="btn btn-secondary">Clear</button>
                                 </div>
                             </div>
                         </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Section -->
    <div class="row">
        <!-- Dynamic Attendance Section -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Quick Attendance Marking</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="employeeSelect" class="form-label">Select Employee</label>
                        <select id="employeeSelect" class="form-select">
                            <option value="">-- Select Employee --</option>
                        </select>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="dateInput" class="form-label">Select Date</label>
                        <input type="date" id="dateInput" class="form-control" max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    </div>
                    
                    <div class="alert alert-info" id="statusAlert" style="display: none;">
                        <strong>Current Status:</strong> <span id="currentStatus">Not Marked</span>
                    </div>
                    

                    
                    <div class="d-grid gap-2" id="attendanceButtons" style="display: none;">
                        <button type="button" class="btn btn-success" id="markPresent">Mark Present</button>
                        <button type="button" class="btn btn-danger" id="markAbsent">Mark Absent</button>
                    </div>
                </div>
            </div>

            <!-- Calendar Section -->
            <div class="card mt-3">
                <div class="card-header">
                    <h5>Calendar View</h5>
                </div>
                <div class="card-body">
                    <div id="calendar"></div>
                </div>
            </div>
        </div>

        <!-- Attendance Records Section -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Attendance Records</h5>
                    <div>
                        <span class="badge bg-primary" id="recordCount">@Model.TotalRecords records</span>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" id="attendanceTable">
                            <thead class="table-dark">
                                <tr>
                                    <th>Employee</th>
                                    <th>Department</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in Model.AttendanceRecords)
                                {
                                    <tr data-employee="@record.EmployeeName" data-employee-code="@record.EmployeeCode" data-department="@record.DepartmentCode" data-status="@record.Status" data-date="@record.Date.ToString("yyyy-MM-dd")">
                                        <td>@record.EmployeeName</td>
                                        <td>@record.DepartmentCode</td>
                                        <td>@record.Date.ToShortDateString()</td>
                                        <td>
                                            <span class="badge @(record.Status.ToString() == "Present" ? "bg-success" : record.Status.ToString() == "Absent" ? "bg-danger" : "bg-warning")">
                                                @record.Status
                                            </span>
                                        </td>
                                        <td>
                                            <a asp-action="Edit" asp-route-id="@record.Id" class="btn btn-sm btn-warning">Edit</a>
                                            <form asp-action="Delete" asp-route-id="@record.Id" method="post" class="d-inline" onsubmit="return confirm('Are you sure?');">
                                                <button class="btn btn-sm btn-danger">Delete</button>
                                            </form>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                                         <!-- Pagination Controls -->
                     <div id="paginationContainer">
                         <nav aria-label="Attendance records pagination">
                             <ul class="pagination justify-content-center" id="paginationList">
                                 <!-- Pagination will be generated dynamically -->
                             </ul>
                         </nav>
                         
                         <div class="text-center text-muted" id="paginationInfo">
                             <!-- Pagination info will be generated dynamically -->
                         </div>
                     </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script>
        $(document).ready(function() {
            let currentEmployeeCode = null;
            let currentDate = null;
            let currentPage = 1;
            let pageSize = 10;
            let filteredRecords = [];
           
            // Load employees and departments
            loadEmployees();
            loadDepartments();
            
            // Load all attendance records for filtering
            loadAllAttendanceRecords();
            
                         // Event handlers for quick attendance marking
             $('#employeeSelect').change(function() {
                 currentEmployeeCode = $(this).val();
                 console.log('Employee selected:', currentEmployeeCode);
                 updateAttendanceStatus();
             });
             
             $('#dateInput').change(function() {
                 currentDate = $(this).val();
                 console.log('Date selected:', currentDate);
                 updateAttendanceStatus();
             });
            
            // Show attendance buttons when employee is selected
            $('#employeeSelect').change(function() {
                const selectedEmployee = $(this).val();
                if (selectedEmployee) {
                    $('#attendanceButtons').show();
                } else {
                    $('#attendanceButtons').hide();
                }
            });
            
            // Mark Present button handler
            $('#markPresent').click(function() {
                if (currentEmployeeCode && currentDate) {
                    updateAttendance('Present');
                } else {
                    showAlert('warning', 'Please select both employee and date');
                }
            });
            
            // Mark Absent button handler
            $('#markAbsent').click(function() {
                if (currentEmployeeCode && currentDate) {
                    updateAttendance('Absent');
                } else {
                    showAlert('warning', 'Please select both employee and date');
                }
            });
            
                                     // Filter handlers - make all filters automatic
            $('#filterEmployee, #filterDepartment, #filterStatus, #filterDate').on('input change', function() {
                applyFilters();
            });
            
            $('#clearFilters').click(function() {
                clearFilters();
            });
            
            // Edit attendance record handler
            $(document).on('click', '.edit-attendance', function() {
                const recordId = $(this).data('id');
                const employeeName = $(this).data('employee');
                const departmentCode = $(this).data('department');
                const date = $(this).data('date');
                const status = $(this).data('status');
                
                // Populate modal with current data
                $('#editRecordId').val(recordId);
                $('#editEmployeeName').val(employeeName);
                $('#editDepartmentName').val(departmentCode);
                $('#editDate').val(date);
                $('#editStatus').val(status);
                
                // Show modal
                $('#editAttendanceModal').modal('show');
            });
            
            // Save edit attendance
            $('#saveEditAttendance').click(function() {
                const recordId = $('#editRecordId').val();
                const date = $('#editDate').val();
                const status = $('#editStatus').val();
                
                if (!date) {
                    showAlert('warning', 'Please select a date');
                    return;
                }
                
                updateAttendanceRecord(recordId, date, status);
            });
            
            // Delete attendance record handler - Modal approach
            var deleteAttendanceModal = document.getElementById('deleteAttendanceModal');
            deleteAttendanceModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var recordId = button.getAttribute('data-id');
                var input = deleteAttendanceModal.querySelector('#attendanceIdToDelete');
                input.value = recordId;
            });
            
            // Handle delete confirmation
            $('#confirmDeleteAttendance').click(function() {
                const recordId = $('#attendanceIdToDelete').val();
                deleteAttendanceRecord(recordId);
                $('#deleteAttendanceModal').modal('hide');
            });
        
            
            // Initialize calendar
            initializeCalendar();
            
                         function loadEmployees() {
                 $.ajax({
                     url: '/Employee/GetEmployeesForDropdown',
                     type: 'GET',
                     success: function(data) {
                         const select = $('#employeeSelect');
                         
                         select.empty();
                         select.append('<option value="">-- Select Employee --</option>');
                         
                         data.forEach(function(employee) {
                             const option = `<option value="${employee.employeeCode}">${employee.displayText}</option>`;
                             select.append(option);
                         });
                     },
                     error: function() {
                         console.error('Failed to load employees');
                     }
                 });
             }
            
            function loadDepartments() {
                $.ajax({
                    url: '/Department/GetAllDepartments',
                    type: 'GET',
                    success: function(data) {
                        const select = $('#filterDepartment');
                        select.empty();
                        select.append('<option value="">All Departments</option>');
                        
                        data.forEach(function(dept) {
                            select.append(`<option value="${dept.code}">${dept.name}</option>`);
                        });
                    },
                    error: function() {
                        console.error('Failed to load departments');
                    }
                });
            }
            
            function loadAllAttendanceRecords() {
                $.ajax({
                    url: '/Attendance/GetAllAttendanceRecords',
                    type: 'GET',
                    success: function(data) {
                        // Store all records globally for filtering
                        window.allAttendanceRecords = data;
                        console.log('Loaded all attendance records:', data.length);
                    },
                    error: function() {
                        console.error('Failed to load all attendance records');
                        window.allAttendanceRecords = [];
                    }
                });
            }
            
                         function updateAttendanceStatus() {
                 console.log('updateAttendanceStatus called with:', { currentEmployeeCode, currentDate });
                 
                 if (!currentEmployeeCode || !currentDate) {
                                              console.log('Missing employee or date, hiding elements');
                         $('#statusAlert').hide();
                         $('#attendanceButtons').hide();
                     return;
                 }
                 
                 console.log('Making AJAX call to get attendance status');
                 $.ajax({
                     url: '/Attendance/GetAttendanceStatus',
                     type: 'GET',
                     data: {
                         employeeCode: currentEmployeeCode,
                         date: currentDate
                     },
                     success: function(data) {
                         console.log('Attendance status received:', data);
                         $('#currentStatus').text(data.status);
                         $('#statusAlert').show();
                         
                         // Update calendar
                         updateCalendar();
                     },
                     error: function(xhr, status, error) {
                         console.error('Failed to get attendance status:', error);
                         $('#currentStatus').text('Error');
                         $('#statusAlert').show();
                         $('#attendanceDropdown').show();
                     }
                 });
             }
            
            function updateAttendance(status) {
                if (!currentEmployeeCode || !currentDate) {
                    showAlert('warning', 'Please select both employee and date');
                    return;
                }
                
                $.ajax({
                    url: '/Attendance/UpdateAttendance',
                    type: 'POST',
                    data: {
                        employeeCode: currentEmployeeCode,
                        date: currentDate,
                        status: status
                    },
                    success: function(data) {
                        if (data.success) {
                            $('#currentStatus').text(status);
                            updateCalendar();
                            showAlert('success', 'Attendance marked successfully');
                            
                            // Refresh the table without page reload
                            refreshAttendanceTable();
                        } else {
                            showAlert('danger', data.message || 'Failed to mark attendance');
                        }
                    },
                    error: function(xhr) {
                        let errorMessage = 'Failed to mark attendance';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.responseText) {
                            try {
                                const response = JSON.parse(xhr.responseText);
                                if (response.message) {
                                    errorMessage = response.message;
                                }
                            } catch (e) {
                                // If response is not JSON, use the text as is
                                errorMessage = xhr.responseText;
                            }
                        }
                        showAlert('warning', errorMessage);
                    }
                });
            }

            function applyFilters() {
                const employee = $('#filterEmployee').val().toLowerCase();
                const department = $('#filterDepartment').val();
                const status = $('#filterStatus').val();
                const date = $('#filterDate').val();

                if (!window.allAttendanceRecords) {
                    console.log('No attendance records loaded yet');
                    return;
                }

                // Filter the global records
                filteredRecords = window.allAttendanceRecords.filter(function(record) {
                    let show = true;
                    
                    if (employee) {
                        const pattern = new RegExp(`\\b${employee}`, 'i');
                        if (!pattern.test(record.employeeName.toLowerCase())) show = false;
                    }
                    
                    if (department && record.departmentCode !== department) show = false;
                    if (status) {
                        // Convert numeric status to string for comparison
                        let recordStatus = 'Not Marked';
                        if (record.status === 1 || record.status === 'Present') {
                            recordStatus = 'Present';
                        } else if (record.status === 2 || record.status === 'Absent') {
                            recordStatus = 'Absent';
                        }
                        // Handle "Not Marked" status - check for null, undefined, or 0
                        if (status === 'NotMarked') {
                            if (record.status !== null && record.status !== undefined && record.status !== 0) {
                                show = false;
                            }
                        } else if (recordStatus !== status) {
                            show = false;
                        }
                    }
                    if (date && record.date.split('T')[0] !== date) show = false;
                    
                    return show;
                });

                // Reset to first page when filtering
                currentPage = 1;
                
                // Update the table with paginated filtered records
                updateAttendanceTableWithPagination();
                updateRecordCount();
            }
            
            function clearFilters() {
                $('#filterEmployee').val('');
                $('#filterDepartment').val('');
                $('#filterStatus').val('');
                $('#filterDate').val(today);
                
                // Reset to first page and show all records
                currentPage = 1;
                filteredRecords = window.allAttendanceRecords || [];
                
                if (window.allAttendanceRecords) {
                    updateAttendanceTableWithPagination();
                }
                updateRecordCount();
            }
            
            function updateAttendanceTableWithPagination() {
                const records = filteredRecords || window.allAttendanceRecords || [];
                const totalRecords = records.length;
                const totalPages = Math.ceil(totalRecords / pageSize);
                
                // Ensure current page is valid
                if (currentPage > totalPages) {
                    currentPage = totalPages || 1;
                }
                
                // Get records for current page
                const startIndex = (currentPage - 1) * pageSize;
                const endIndex = startIndex + pageSize;
                const pageRecords = records.slice(startIndex, endIndex);
                
                // Update table
                updateAttendanceTable(pageRecords);
                
                // Update pagination
                updatePagination(totalPages, totalRecords);
            }
            
            function updateAttendanceTable(records) {
                const tbody = $('#attendanceTable tbody');
                tbody.empty();
                
                records.forEach(function(record) {
                    const date = new Date(record.date).toLocaleDateString();
                    
                    // Convert numeric status to string
                    let statusText = 'Not Marked';
                    let statusClass = 'bg-warning';
                    
                    if (record.status === 1 || record.status === 'Present') {
                        statusText = 'Present';
                        statusClass = 'bg-success';
                    } else if (record.status === 2 || record.status === 'Absent') {
                        statusText = 'Absent';
                        statusClass = 'bg-danger';
                    }
                    
                    const row = `
                        <tr data-employee="${record.employeeName}" data-employee-code="${record.employeeCode}" data-department="${record.departmentCode}" data-status="${statusText}" data-date="${record.date.split('T')[0]}">
                            <td>${record.employeeName}</td>
                            <td>${record.departmentCode}</td>
                            <td>${date}</td>
                            <td>
                                <span class="badge ${statusClass}">
                                    ${statusText}
                                </span>
                            </td>
                                                         <td>
                                 <button class="btn btn-sm btn-warning edit-attendance" data-id="${record.id}" data-employee="${record.employeeName}" data-department="${record.departmentCode}" data-date="${record.date.split('T')[0]}" data-status="${record.status}">Edit</button>
                                 <button class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#deleteAttendanceModal" data-id="${record.id}">Delete</button>
                             </td>
                        </tr>
                    `;
                    tbody.append(row);
                });
            }
            
            function updatePagination(totalPages, totalRecords) {
                const paginationList = $('#paginationList');
                const paginationInfo = $('#paginationInfo');
                
                paginationList.empty();
                
                if (totalPages <= 1) {
                    paginationList.hide();
                    paginationInfo.hide();
                    return;
                }
                
                paginationList.show();
                paginationInfo.show();
                
                // Previous button
                if (currentPage > 1) {
                    paginationList.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a>
                        </li>
                    `);
                }
                
                // Page numbers
                const startPage = Math.max(1, currentPage - 2);
                const endPage = Math.min(totalPages, currentPage + 2);
                
                if (startPage > 1) {
                    paginationList.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="1">1</a>
                        </li>
                    `);
                    if (startPage > 2) {
                        paginationList.append(`
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        `);
                    }
                }
                
                for (let i = startPage; i <= endPage; i++) {
                    paginationList.append(`
                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }
                
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        paginationList.append(`
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        `);
                    }
                    paginationList.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>
                        </li>
                    `);
                }
                
                // Next button
                if (currentPage < totalPages) {
                    paginationList.append(`
                        <li class="page-item">
                            <a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>
                        </li>
                    `);
                }
                
                // Pagination info
                const startRecord = (currentPage - 1) * pageSize + 1;
                const endRecord = Math.min(currentPage * pageSize, totalRecords);
                paginationInfo.html(`
                    <small>Showing ${startRecord} to ${endRecord} of ${totalRecords} records</small>
                `);
                
                // Add click handlers to pagination links
                paginationList.find('.page-link').click(function(e) {
                    e.preventDefault();
                    const page = parseInt($(this).data('page'));
                    if (page && page !== currentPage) {
                        currentPage = page;
                        updateAttendanceTableWithPagination();
                    }
                });
            }
            
            function updateRecordCount() {
                const visibleCount = $('#attendanceTable tbody tr').length;
                $('#recordCount').text(visibleCount + ' records');
            }
            
            function refreshAttendanceTable() {
                // Reload all attendance records and refresh the table
                loadAllAttendanceRecords();
                
                // Apply current filters if any
                setTimeout(function() {
                    if (window.allAttendanceRecords) {
                        const employee = $('#filterEmployee').val();
                        const department = $('#filterDepartment').val();
                        const status = $('#filterStatus').val();
                        const date = $('#filterDate').val();
                        
                        if (employee || department || status || date) {
                            applyFilters();
                        } else {
                            // Reset to first page and show all records
                            currentPage = 1;
                            filteredRecords = window.allAttendanceRecords;
                            updateAttendanceTableWithPagination();
                            updateRecordCount();
                        }
                    }
                }, 500);
            }
            
            function initializeCalendar() {
                const today = new Date();
                const currentMonth = today.getMonth();
                const currentYear = today.getFullYear();
                
                // Create calendar HTML
                let calendarHtml = '<table class="table table-bordered table-sm">';
                calendarHtml += '<thead><tr><th colspan="7" class="text-center">' + 
                    new Date(currentYear, currentMonth).toLocaleDateString('en-US', { month: 'long', year: 'numeric' }) + 
                    '</th></tr>';
                calendarHtml += '<tr><th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th></tr></thead>';
                calendarHtml += '<tbody>';
                
                const firstDay = new Date(currentYear, currentMonth, 1);
                const lastDay = new Date(currentYear, currentMonth + 1, 0);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay());
                
                for (let week = 0; week < 6; week++) {
                    calendarHtml += '<tr>';
                    for (let day = 0; day < 7; day++) {
                        const currentDate = new Date(startDate);
                        currentDate.setDate(startDate.getDate() + (week * 7) + day);
                        
                        const isCurrentMonth = currentDate.getMonth() === currentMonth;
                        const isToday = currentDate.toDateString() === today.toDateString();
                        const isFuture = currentDate > today;
                        
                        let className = 'calendar-day';
                        if (isToday) className += ' table-primary';
                        if (isFuture) className += ' text-muted';
                        if (!isCurrentMonth) className += ' text-muted';
                        
                        calendarHtml += `<td class="${className}" data-date="${currentDate.toISOString().split('T')[0]}">${currentDate.getDate()}</td>`;
                    }
                    calendarHtml += '</tr>';
                }
                calendarHtml += '</tbody></table>';
                
                $('#calendar').html(calendarHtml);
                
                // Add click handlers to calendar days
                $('.calendar-day').click(function() {
                    const date = $(this).data('date');
                    const isFuture = new Date(date) > today;
                    
                    if (!isFuture) {
                        // Fix the date offset issue by adding one day
                        const selectedDate = new Date(date);
                        selectedDate.setDate(selectedDate.getDate() + 1);
                        const correctedDate = selectedDate.toISOString().split('T')[0];
                        
                        $('#dateInput').val(correctedDate);
                        currentDate = correctedDate;
                        updateAttendanceStatus();
                    }
                });
            }
            
            function updateCalendar() {
                // This would update calendar colors based on attendance
                // For now, just refresh the calendar
                initializeCalendar();
            }
            
            function updateAttendanceRecord(recordId, date, status) {
                $.ajax({
                    url: '/Attendance/UpdateAttendanceRecord',
                    type: 'POST',
                    data: {
                          __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                        id: recordId,
                        date: date,
                        status: status
                    },
                    success: function(data) {
                        if (data.success) {
                            $('#editAttendanceModal').modal('hide');
                            showAlert('success', 'Attendance record updated successfully');
                            refreshAttendanceTable();
                        } else {
                            showAlert('danger', data.message || 'Failed to update attendance record');
                        }
                    },
                    error: function(xhr) {
                        let errorMessage = 'Failed to update attendance record';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        showAlert('danger', errorMessage);
                    }
                });
            }
            
            function deleteAttendanceRecord(recordId) {
                $.ajax({
                    url: `/Attendance/Delete/${recordId}`,
                    type: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(data) {
                        if (data.success) {
                            showAlert('success', data.message || 'Attendance record deleted successfully');
                            refreshAttendanceTable();
                        } else {
                            showAlert('danger', data.message || 'Failed to delete attendance record');
                        }
                    },
                    error: function(xhr) {
                        let errorMessage = 'Failed to delete attendance record';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.status === 404) {
                            errorMessage = 'Attendance record not found';
                        } else if (xhr.status === 500) {
                            errorMessage = 'Server error occurred while deleting the record';
                        }
                        showAlert('danger', errorMessage);
                    }
                });
            }
            
            function showAlert(type, message) {
                const alertHtml = `<div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <strong>${type === 'success' ? 'Success' : type === 'danger' ? 'Error' : type === 'warning' ? 'Warning' : 'Info'}!</strong> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>`;
                
                // Clear existing alerts
                $('#alertContainer').empty();
                
                // Add new alert to the fixed container
                $('#alertContainer').html(alertHtml).show();
                
                // Auto-dismiss after 1.5 seconds
                setTimeout(function() {
                    $('#alertContainer').fadeOut();
                }, 1500);
            }
            
            // Initialize record count
            updateRecordCount();
            
            // Initialize table with all records after loading
            setTimeout(function() {
                if (window.allAttendanceRecords) {
                    currentPage = 1;
                    filteredRecords = window.allAttendanceRecords;
                    updateAttendanceTableWithPagination();
                    updateRecordCount();
                }
            }, 1000);
        });
    </script>
    
    <style>
        .calendar-day {
            cursor: pointer;
            text-align: center;
            padding: 5px;
        }
        
        .calendar-day:hover {
            background-color: #f8f9fa;
        }
        
        .calendar-day.text-muted {
            cursor: not-allowed;
        }
        
        .table-responsive {
            max-height: 600px;
            overflow-y: auto;
        }
        
        #alertContainer {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        
        #alertContainer .alert {
            margin: 0;
            border-radius: 8px;
        }
    </style>
} 